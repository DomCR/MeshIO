//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MeshIO.GLTF.Schema.V2 {
    using System.Linq;
    using System.Runtime.Serialization;
    
    
    public class GltfAccessor {
        
        /// <summary>
        /// Backing field for BufferView.
        /// </summary>
        private System.Nullable<int> _bufferView;
        
        /// <summary>
        /// Backing field for ByteOffset.
        /// </summary>
        private int _byteOffset = 0;
        
        /// <summary>
        /// Backing field for ComponentType.
        /// </summary>
        private ComponentTypeEnum _componentType;
        
        /// <summary>
        /// Backing field for Normalized.
        /// </summary>
        private bool _normalized = false;
        
        /// <summary>
        /// Backing field for Count.
        /// </summary>
        private int _count;
        
        /// <summary>
        /// Backing field for Type.
        /// </summary>
        private TypeEnum _type;
        
        /// <summary>
        /// Backing field for Max.
        /// </summary>
        private float[] _max;
        
        /// <summary>
        /// Backing field for Min.
        /// </summary>
        private float[] _min;
        
        /// <summary>
        /// Backing field for Sparse.
        /// </summary>
        private GltfAccessorSparse _sparse;
        
        /// <summary>
        /// Backing field for Name.
        /// </summary>
        private string _name;
        
        /// <summary>
        /// Backing field for Extensions.
        /// </summary>
        private System.Collections.Generic.Dictionary<string, object> _extensions;
        
        /// <summary>
        /// Backing field for Extras.
        /// </summary>
        private GltfExtras _extras;
        
        /// <summary>
        /// The index of the bufferView.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("bufferView")]
        public System.Nullable<int> BufferView {
            get {
                return this._bufferView;
            }
            set {
                if ((value < 0)) {
                    throw new System.ArgumentOutOfRangeException("BufferView", value, "Expected value to be greater than or equal to 0");
                }
                this._bufferView = value;
            }
        }
        
        /// <summary>
        /// The offset relative to the start of the bufferView in bytes.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("byteOffset")]
        public int ByteOffset {
            get {
                return this._byteOffset;
            }
            set {
                if ((value < 0)) {
                    throw new System.ArgumentOutOfRangeException("ByteOffset", value, "Expected value to be greater than or equal to 0");
                }
                this._byteOffset = value;
            }
        }
        
        /// <summary>
        /// The datatype of components in the attribute.
        /// </summary>
        [Newtonsoft.Json.JsonRequiredAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("componentType")]
        public ComponentTypeEnum ComponentType {
            get {
                return this._componentType;
            }
            set {
                this._componentType = value;
            }
        }
        
        /// <summary>
        /// Specifies whether integer data values should be normalized.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("normalized")]
        public bool Normalized {
            get {
                return this._normalized;
            }
            set {
                this._normalized = value;
            }
        }
        
        /// <summary>
        /// The number of attributes referenced by this accessor.
        /// </summary>
        [Newtonsoft.Json.JsonRequiredAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("count")]
        public int Count {
            get {
                return this._count;
            }
            set {
                if ((value < 1)) {
                    throw new System.ArgumentOutOfRangeException("Count", value, "Expected value to be greater than or equal to 1");
                }
                this._count = value;
            }
        }
        
        /// <summary>
        /// Specifies if the attribute is a scalar, vector, or matrix.
        /// </summary>
        [Newtonsoft.Json.JsonConverterAttribute(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [Newtonsoft.Json.JsonRequiredAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("type")]
        public TypeEnum Type {
            get {
                return this._type;
            }
            set {
                this._type = value;
            }
        }
        
        /// <summary>
        /// Maximum value of each component in this attribute.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("max")]
        public float[] Max {
            get {
                return this._max;
            }
            set {
                if ((value == null)) {
                    this._max = value;
                    return;
                }
                if ((value.Length < 1u)) {
                    throw new System.ArgumentException("Array not long enough");
                }
                if ((value.Length > 16u)) {
                    throw new System.ArgumentException("Array too long");
                }
                this._max = value;
            }
        }
        
        /// <summary>
        /// Minimum value of each component in this attribute.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("min")]
        public float[] Min {
            get {
                return this._min;
            }
            set {
                if ((value == null)) {
                    this._min = value;
                    return;
                }
                if ((value.Length < 1u)) {
                    throw new System.ArgumentException("Array not long enough");
                }
                if ((value.Length > 16u)) {
                    throw new System.ArgumentException("Array too long");
                }
                this._min = value;
            }
        }
        
        /// <summary>
        /// Sparse storage of attributes that deviate from their initialization value.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("sparse")]
        public GltfAccessorSparse Sparse {
            get {
                return this._sparse;
            }
            set {
                this._sparse = value;
            }
        }
        
        /// <summary>
        /// The user-defined name of this object.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        public string Name {
            get {
                return this._name;
            }
            set {
                this._name = value;
            }
        }
        
        /// <summary>
        /// Dictionary object with extension-specific objects.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("extensions")]
        public System.Collections.Generic.Dictionary<string, object> Extensions {
            get {
                return this._extensions;
            }
            set {
                this._extensions = value;
            }
        }
        
        /// <summary>
        /// Application-specific data.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("extras")]
        public GltfExtras Extras {
            get {
                return this._extras;
            }
            set {
                this._extras = value;
            }
        }
        
        public bool ShouldSerializeBufferView() {
            return ((_bufferView == null) 
                        == false);
        }
        
        public bool ShouldSerializeByteOffset() {
            return ((_byteOffset == 0) 
                        == false);
        }
        
        public bool ShouldSerializeNormalized() {
            return ((_normalized == false) 
                        == false);
        }
        
        public bool ShouldSerializeMax() {
            return ((_max == null) 
                        == false);
        }
        
        public bool ShouldSerializeMin() {
            return ((_min == null) 
                        == false);
        }
        
        public bool ShouldSerializeSparse() {
            return ((_sparse == null) 
                        == false);
        }
        
        public bool ShouldSerializeName() {
            return ((_name == null) 
                        == false);
        }
        
        public bool ShouldSerializeExtensions() {
            return ((_extensions == null) 
                        == false);
        }
        
        public bool ShouldSerializeExtras() {
            return ((_extras == null) 
                        == false);
        }
        
        public enum ComponentTypeEnum {
            
            BYTE = 5120,
            
            UNSIGNED_BYTE = 5121,
            
            SHORT = 5122,
            
            UNSIGNED_SHORT = 5123,
            
            UNSIGNED_INT = 5125,
            
            FLOAT = 5126,
        }
        
        public enum TypeEnum {
            
            SCALAR,
            
            VEC2,
            
            VEC3,
            
            VEC4,
            
            MAT2,
            
            MAT3,
            
            MAT4,
        }
    }
}
