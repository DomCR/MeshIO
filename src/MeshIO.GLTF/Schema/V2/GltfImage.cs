//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MeshIO.GLTF.Schema.V2 {
    using System.Linq;
    using System.Runtime.Serialization;
    
    
    public class GltfImage {
        
        /// <summary>
        /// Backing field for Uri.
        /// </summary>
        private string _uri;
        
        /// <summary>
        /// Backing field for MimeType.
        /// </summary>
        private System.Nullable<MimeTypeEnum> _mimeType;
        
        /// <summary>
        /// Backing field for BufferView.
        /// </summary>
        private System.Nullable<int> _bufferView;
        
        /// <summary>
        /// Backing field for Name.
        /// </summary>
        private string _name;
        
        /// <summary>
        /// Backing field for Extensions.
        /// </summary>
        private System.Collections.Generic.Dictionary<string, object> _extensions;
        
        /// <summary>
        /// Backing field for Extras.
        /// </summary>
        private GltfExtras _extras;
        
        /// <summary>
        /// The uri of the image.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("uri")]
        public string Uri {
            get {
                return this._uri;
            }
            set {
                this._uri = value;
            }
        }
        
        /// <summary>
        /// The image's MIME type. Required if `bufferView` is defined.
        /// </summary>
        [Newtonsoft.Json.JsonConverterAttribute(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [Newtonsoft.Json.JsonPropertyAttribute("mimeType")]
        public System.Nullable<MimeTypeEnum> MimeType {
            get {
                return this._mimeType;
            }
            set {
                this._mimeType = value;
            }
        }
        
        /// <summary>
        /// The index of the bufferView that contains the image. Use this instead of the image's uri property.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("bufferView")]
        public System.Nullable<int> BufferView {
            get {
                return this._bufferView;
            }
            set {
                if ((value < 0)) {
                    throw new System.ArgumentOutOfRangeException("BufferView", value, "Expected value to be greater than or equal to 0");
                }
                this._bufferView = value;
            }
        }
        
        /// <summary>
        /// The user-defined name of this object.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        public string Name {
            get {
                return this._name;
            }
            set {
                this._name = value;
            }
        }
        
        /// <summary>
        /// Dictionary object with extension-specific objects.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("extensions")]
        public System.Collections.Generic.Dictionary<string, object> Extensions {
            get {
                return this._extensions;
            }
            set {
                this._extensions = value;
            }
        }
        
        /// <summary>
        /// Application-specific data.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("extras")]
        public GltfExtras Extras {
            get {
                return this._extras;
            }
            set {
                this._extras = value;
            }
        }
        
        public bool ShouldSerializeUri() {
            return ((_uri == null) 
                        == false);
        }
        
        public bool ShouldSerializeMimeType() {
            return ((_mimeType == null) 
                        == false);
        }
        
        public bool ShouldSerializeBufferView() {
            return ((_bufferView == null) 
                        == false);
        }
        
        public bool ShouldSerializeName() {
            return ((_name == null) 
                        == false);
        }
        
        public bool ShouldSerializeExtensions() {
            return ((_extensions == null) 
                        == false);
        }
        
        public bool ShouldSerializeExtras() {
            return ((_extras == null) 
                        == false);
        }
        
        public enum MimeTypeEnum {
            
            [EnumMember(Value="image/jpeg")]
            image_jpeg,
            
            [EnumMember(Value="image/png")]
            image_png,
        }
    }
}
