//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MeshIO.GLTF.Schema.V2 {
    using System.Linq;
    using System.Runtime.Serialization;
    
    
    public class GltfMaterialPbrMetallicRoughness {
        
        /// <summary>
        /// Backing field for BaseColorFactor.
        /// </summary>
        private float[] _baseColorFactor = new float[] {
                1F,
                1F,
                1F,
                1F};
        
        /// <summary>
        /// Backing field for BaseColorTexture.
        /// </summary>
        private GltfTextureInfo _baseColorTexture;
        
        /// <summary>
        /// Backing field for MetallicFactor.
        /// </summary>
        private float _metallicFactor = 1F;
        
        /// <summary>
        /// Backing field for RoughnessFactor.
        /// </summary>
        private float _roughnessFactor = 1F;
        
        /// <summary>
        /// Backing field for MetallicRoughnessTexture.
        /// </summary>
        private GltfTextureInfo _metallicRoughnessTexture;
        
        /// <summary>
        /// Backing field for Extensions.
        /// </summary>
        private System.Collections.Generic.Dictionary<string, object> _extensions;
        
        /// <summary>
        /// Backing field for Extras.
        /// </summary>
        private GltfExtras _extras;
        
        /// <summary>
        /// The material's base color factor.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("baseColorFactor")]
        public float[] BaseColorFactor {
            get {
                return this._baseColorFactor;
            }
            set {
                if ((value.Length < 4u)) {
                    throw new System.ArgumentException("Array not long enough");
                }
                if ((value.Length > 4u)) {
                    throw new System.ArgumentException("Array too long");
                }
                int index = 0;
                for (index = 0; (index < value.Length); index = (index + 1)) {
                    if ((value[index] < 0D)) {
                        throw new System.ArgumentOutOfRangeException();
                    }
                }
                for (index = 0; (index < value.Length); index = (index + 1)) {
                    if ((value[index] > 1D)) {
                        throw new System.ArgumentOutOfRangeException();
                    }
                }
                this._baseColorFactor = value;
            }
        }
        
        /// <summary>
        /// The base color texture.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("baseColorTexture")]
        public GltfTextureInfo BaseColorTexture {
            get {
                return this._baseColorTexture;
            }
            set {
                this._baseColorTexture = value;
            }
        }
        
        /// <summary>
        /// The metalness of the material.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("metallicFactor")]
        public float MetallicFactor {
            get {
                return this._metallicFactor;
            }
            set {
                if ((value < 0D)) {
                    throw new System.ArgumentOutOfRangeException("MetallicFactor", value, "Expected value to be greater than or equal to 0");
                }
                if ((value > 1D)) {
                    throw new System.ArgumentOutOfRangeException("MetallicFactor", value, "Expected value to be less than or equal to 1");
                }
                this._metallicFactor = value;
            }
        }
        
        /// <summary>
        /// The roughness of the material.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("roughnessFactor")]
        public float RoughnessFactor {
            get {
                return this._roughnessFactor;
            }
            set {
                if ((value < 0D)) {
                    throw new System.ArgumentOutOfRangeException("RoughnessFactor", value, "Expected value to be greater than or equal to 0");
                }
                if ((value > 1D)) {
                    throw new System.ArgumentOutOfRangeException("RoughnessFactor", value, "Expected value to be less than or equal to 1");
                }
                this._roughnessFactor = value;
            }
        }
        
        /// <summary>
        /// The metallic-roughness texture.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("metallicRoughnessTexture")]
        public GltfTextureInfo MetallicRoughnessTexture {
            get {
                return this._metallicRoughnessTexture;
            }
            set {
                this._metallicRoughnessTexture = value;
            }
        }
        
        /// <summary>
        /// Dictionary object with extension-specific objects.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("extensions")]
        public System.Collections.Generic.Dictionary<string, object> Extensions {
            get {
                return this._extensions;
            }
            set {
                this._extensions = value;
            }
        }
        
        /// <summary>
        /// Application-specific data.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("extras")]
        public GltfExtras Extras {
            get {
                return this._extras;
            }
            set {
                this._extras = value;
            }
        }
        
        public bool ShouldSerializeBaseColorFactor() {
            return (_baseColorFactor.SequenceEqual(new float[] {
                        1F,
                        1F,
                        1F,
                        1F}) == false);
        }
        
        public bool ShouldSerializeBaseColorTexture() {
            return ((_baseColorTexture == null) 
                        == false);
        }
        
        public bool ShouldSerializeMetallicFactor() {
            return ((_metallicFactor == 1F) 
                        == false);
        }
        
        public bool ShouldSerializeRoughnessFactor() {
            return ((_roughnessFactor == 1F) 
                        == false);
        }
        
        public bool ShouldSerializeMetallicRoughnessTexture() {
            return ((_metallicRoughnessTexture == null) 
                        == false);
        }
        
        public bool ShouldSerializeExtensions() {
            return ((_extensions == null) 
                        == false);
        }
        
        public bool ShouldSerializeExtras() {
            return ((_extras == null) 
                        == false);
        }
    }
}
