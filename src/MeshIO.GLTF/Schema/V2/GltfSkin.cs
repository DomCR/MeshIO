//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MeshIO.GLTF.Schema.V2 {
    using System.Linq;
    using System.Runtime.Serialization;
    
    
    public class GltfSkin {
        
        /// <summary>
        /// Backing field for InverseBindMatrices.
        /// </summary>
        private System.Nullable<int> _inverseBindMatrices;
        
        /// <summary>
        /// Backing field for Skeleton.
        /// </summary>
        private System.Nullable<int> _skeleton;
        
        /// <summary>
        /// Backing field for Joints.
        /// </summary>
        private int[] _joints;
        
        /// <summary>
        /// Backing field for Name.
        /// </summary>
        private string _name;
        
        /// <summary>
        /// Backing field for Extensions.
        /// </summary>
        private System.Collections.Generic.Dictionary<string, object> _extensions;
        
        /// <summary>
        /// Backing field for Extras.
        /// </summary>
        private GltfExtras _extras;
        
        /// <summary>
        /// The index of the accessor containing the floating-point 4x4 inverse-bind matrices.  The default is that each matrix is a 4x4 identity matrix, which implies that inverse-bind matrices were pre-applied.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("inverseBindMatrices")]
        public System.Nullable<int> InverseBindMatrices {
            get {
                return this._inverseBindMatrices;
            }
            set {
                if ((value < 0)) {
                    throw new System.ArgumentOutOfRangeException("InverseBindMatrices", value, "Expected value to be greater than or equal to 0");
                }
                this._inverseBindMatrices = value;
            }
        }
        
        /// <summary>
        /// The index of the node used as a skeleton root.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("skeleton")]
        public System.Nullable<int> Skeleton {
            get {
                return this._skeleton;
            }
            set {
                if ((value < 0)) {
                    throw new System.ArgumentOutOfRangeException("Skeleton", value, "Expected value to be greater than or equal to 0");
                }
                this._skeleton = value;
            }
        }
        
        /// <summary>
        /// Indices of skeleton nodes, used as joints in this skin.
        /// </summary>
        [Newtonsoft.Json.JsonRequiredAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("joints")]
        public int[] Joints {
            get {
                return this._joints;
            }
            set {
                if ((value == null)) {
                    this._joints = value;
                    return;
                }
                if ((value.Length < 1u)) {
                    throw new System.ArgumentException("Array not long enough");
                }
                int index = 0;
                for (index = 0; (index < value.Length); index = (index + 1)) {
                    if ((value[index] < 0)) {
                        throw new System.ArgumentOutOfRangeException();
                    }
                }
                this._joints = value;
            }
        }
        
        /// <summary>
        /// The user-defined name of this object.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        public string Name {
            get {
                return this._name;
            }
            set {
                this._name = value;
            }
        }
        
        /// <summary>
        /// Dictionary object with extension-specific objects.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("extensions")]
        public System.Collections.Generic.Dictionary<string, object> Extensions {
            get {
                return this._extensions;
            }
            set {
                this._extensions = value;
            }
        }
        
        /// <summary>
        /// Application-specific data.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("extras")]
        public GltfExtras Extras {
            get {
                return this._extras;
            }
            set {
                this._extras = value;
            }
        }
        
        public bool ShouldSerializeInverseBindMatrices() {
            return ((_inverseBindMatrices == null) 
                        == false);
        }
        
        public bool ShouldSerializeSkeleton() {
            return ((_skeleton == null) 
                        == false);
        }
        
        public bool ShouldSerializeJoints() {
            return ((_joints == null) 
                        == false);
        }
        
        public bool ShouldSerializeName() {
            return ((_name == null) 
                        == false);
        }
        
        public bool ShouldSerializeExtensions() {
            return ((_extensions == null) 
                        == false);
        }
        
        public bool ShouldSerializeExtras() {
            return ((_extras == null) 
                        == false);
        }
    }
}
