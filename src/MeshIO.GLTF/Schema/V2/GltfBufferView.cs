//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MeshIO.GLTF.Schema.V2 {
    using System.Linq;
    using System.Runtime.Serialization;
    
    
    public class GltfBufferView {
        
        /// <summary>
        /// Backing field for Buffer.
        /// </summary>
        private int _buffer;
        
        /// <summary>
        /// Backing field for ByteOffset.
        /// </summary>
        private int _byteOffset = 0;
        
        /// <summary>
        /// Backing field for ByteLength.
        /// </summary>
        private int _byteLength;
        
        /// <summary>
        /// Backing field for ByteStride.
        /// </summary>
        private System.Nullable<int> _byteStride;
        
        /// <summary>
        /// Backing field for Target.
        /// </summary>
        private System.Nullable<TargetEnum> _target;
        
        /// <summary>
        /// Backing field for Name.
        /// </summary>
        private string _name;
        
        /// <summary>
        /// Backing field for Extensions.
        /// </summary>
        private System.Collections.Generic.Dictionary<string, object> _extensions;
        
        /// <summary>
        /// Backing field for Extras.
        /// </summary>
        private GltfExtras _extras;
        
        /// <summary>
        /// The index of the buffer.
        /// </summary>
        [Newtonsoft.Json.JsonRequiredAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("buffer")]
        public int Buffer {
            get {
                return this._buffer;
            }
            set {
                if ((value < 0)) {
                    throw new System.ArgumentOutOfRangeException("Buffer", value, "Expected value to be greater than or equal to 0");
                }
                this._buffer = value;
            }
        }
        
        /// <summary>
        /// The offset into the buffer in bytes.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("byteOffset")]
        public int ByteOffset {
            get {
                return this._byteOffset;
            }
            set {
                if ((value < 0)) {
                    throw new System.ArgumentOutOfRangeException("ByteOffset", value, "Expected value to be greater than or equal to 0");
                }
                this._byteOffset = value;
            }
        }
        
        /// <summary>
        /// The length of the bufferView in bytes.
        /// </summary>
        [Newtonsoft.Json.JsonRequiredAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("byteLength")]
        public int ByteLength {
            get {
                return this._byteLength;
            }
            set {
                if ((value < 1)) {
                    throw new System.ArgumentOutOfRangeException("ByteLength", value, "Expected value to be greater than or equal to 1");
                }
                this._byteLength = value;
            }
        }
        
        /// <summary>
        /// The stride, in bytes.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("byteStride")]
        public System.Nullable<int> ByteStride {
            get {
                return this._byteStride;
            }
            set {
                if ((value < 4)) {
                    throw new System.ArgumentOutOfRangeException("ByteStride", value, "Expected value to be greater than or equal to 4");
                }
                if ((value > 252)) {
                    throw new System.ArgumentOutOfRangeException("ByteStride", value, "Expected value to be less than or equal to 252");
                }
                this._byteStride = value;
            }
        }
        
        /// <summary>
        /// The target that the GPU buffer should be bound to.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("target")]
        public System.Nullable<TargetEnum> Target {
            get {
                return this._target;
            }
            set {
                this._target = value;
            }
        }
        
        /// <summary>
        /// The user-defined name of this object.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("name")]
        public string Name {
            get {
                return this._name;
            }
            set {
                this._name = value;
            }
        }
        
        /// <summary>
        /// Dictionary object with extension-specific objects.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("extensions")]
        public System.Collections.Generic.Dictionary<string, object> Extensions {
            get {
                return this._extensions;
            }
            set {
                this._extensions = value;
            }
        }
        
        /// <summary>
        /// Application-specific data.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("extras")]
        public GltfExtras Extras {
            get {
                return this._extras;
            }
            set {
                this._extras = value;
            }
        }
        
        public bool ShouldSerializeByteOffset() {
            return ((_byteOffset == 0) 
                        == false);
        }
        
        public bool ShouldSerializeByteStride() {
            return ((_byteStride == null) 
                        == false);
        }
        
        public bool ShouldSerializeTarget() {
            return ((_target == null) 
                        == false);
        }
        
        public bool ShouldSerializeName() {
            return ((_name == null) 
                        == false);
        }
        
        public bool ShouldSerializeExtensions() {
            return ((_extensions == null) 
                        == false);
        }
        
        public bool ShouldSerializeExtras() {
            return ((_extras == null) 
                        == false);
        }
        
        public enum TargetEnum {
            
            ARRAY_BUFFER = 34962,
            
            ELEMENT_ARRAY_BUFFER = 34963,
        }
    }
}
