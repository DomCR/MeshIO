//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MeshIO.GLTF.Schema.V2 {
    using System.Linq;
    using System.Runtime.Serialization;
    
    
    public class GltfMeshPrimitive {
        
        /// <summary>
        /// Backing field for Attributes.
        /// </summary>
        private System.Collections.Generic.Dictionary<string, int> _attributes;
        
        /// <summary>
        /// Backing field for Indices.
        /// </summary>
        private System.Nullable<int> _indices;
        
        /// <summary>
        /// Backing field for Material.
        /// </summary>
        private System.Nullable<int> _material;
        
        /// <summary>
        /// Backing field for Mode.
        /// </summary>
        private ModeEnum _mode = ModeEnum.TRIANGLES;
        
        /// <summary>
        /// Backing field for Targets.
        /// </summary>
        private System.Collections.Generic.Dictionary<string, int>[] _targets;
        
        /// <summary>
        /// Backing field for Extensions.
        /// </summary>
        private System.Collections.Generic.Dictionary<string, object> _extensions;
        
        /// <summary>
        /// Backing field for Extras.
        /// </summary>
        private GltfExtras _extras;
        
        /// <summary>
        /// A dictionary object, where each key corresponds to mesh attribute semantic and each value is the index of the accessor containing attribute's data.
        /// </summary>
        [Newtonsoft.Json.JsonRequiredAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("attributes")]
        public System.Collections.Generic.Dictionary<string, int> Attributes {
            get {
                return this._attributes;
            }
            set {
                this._attributes = value;
            }
        }
        
        /// <summary>
        /// The index of the accessor that contains the indices.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("indices")]
        public System.Nullable<int> Indices {
            get {
                return this._indices;
            }
            set {
                if ((value < 0)) {
                    throw new System.ArgumentOutOfRangeException("Indices", value, "Expected value to be greater than or equal to 0");
                }
                this._indices = value;
            }
        }
        
        /// <summary>
        /// The index of the material to apply to this primitive when rendering.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("material")]
        public System.Nullable<int> Material {
            get {
                return this._material;
            }
            set {
                if ((value < 0)) {
                    throw new System.ArgumentOutOfRangeException("Material", value, "Expected value to be greater than or equal to 0");
                }
                this._material = value;
            }
        }
        
        /// <summary>
        /// The type of primitives to render.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("mode")]
        public ModeEnum Mode {
            get {
                return this._mode;
            }
            set {
                this._mode = value;
            }
        }
        
        /// <summary>
        /// An array of Morph Targets, each  Morph Target is a dictionary mapping attributes (only `POSITION`, `NORMAL`, and `TANGENT` supported) to their deviations in the Morph Target.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("targets")]
        public System.Collections.Generic.Dictionary<string, int>[] Targets {
            get {
                return this._targets;
            }
            set {
                if ((value == null)) {
                    this._targets = value;
                    return;
                }
                if ((value.Length < 1u)) {
                    throw new System.ArgumentException("Array not long enough");
                }
                this._targets = value;
            }
        }
        
        /// <summary>
        /// Dictionary object with extension-specific objects.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("extensions")]
        public System.Collections.Generic.Dictionary<string, object> Extensions {
            get {
                return this._extensions;
            }
            set {
                this._extensions = value;
            }
        }
        
        /// <summary>
        /// Application-specific data.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("extras")]
        public GltfExtras Extras {
            get {
                return this._extras;
            }
            set {
                this._extras = value;
            }
        }
        
        public bool ShouldSerializeAttributes() {
            return ((_attributes == null) 
                        == false);
        }
        
        public bool ShouldSerializeIndices() {
            return ((_indices == null) 
                        == false);
        }
        
        public bool ShouldSerializeMaterial() {
            return ((_material == null) 
                        == false);
        }
        
        public bool ShouldSerializeMode() {
            return ((_mode == ModeEnum.TRIANGLES) 
                        == false);
        }
        
        public bool ShouldSerializeTargets() {
            return ((_targets == null) 
                        == false);
        }
        
        public bool ShouldSerializeExtensions() {
            return ((_extensions == null) 
                        == false);
        }
        
        public bool ShouldSerializeExtras() {
            return ((_extras == null) 
                        == false);
        }
        
        public enum ModeEnum {
            
            POINTS = 0,
            
            LINES = 1,
            
            LINE_LOOP = 2,
            
            LINE_STRIP = 3,
            
            TRIANGLES = 4,
            
            TRIANGLE_STRIP = 5,
            
            TRIANGLE_FAN = 6,
        }
    }
}
