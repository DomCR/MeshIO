//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MeshIO.GLTF.Schema.V2 {
    using System.Linq;
    using System.Runtime.Serialization;
    
    
    public class GltfAnimationSampler {
        
        /// <summary>
        /// Backing field for Input.
        /// </summary>
        private int _input;
        
        /// <summary>
        /// Backing field for Interpolation.
        /// </summary>
        private InterpolationEnum _interpolation = InterpolationEnum.LINEAR;
        
        /// <summary>
        /// Backing field for Output.
        /// </summary>
        private int _output;
        
        /// <summary>
        /// Backing field for Extensions.
        /// </summary>
        private System.Collections.Generic.Dictionary<string, object> _extensions;
        
        /// <summary>
        /// Backing field for Extras.
        /// </summary>
        private GltfExtras _extras;
        
        /// <summary>
        /// The index of an accessor containing keyframe input values, e.g., time.
        /// </summary>
        [Newtonsoft.Json.JsonRequiredAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("input")]
        public int Input {
            get {
                return this._input;
            }
            set {
                if ((value < 0)) {
                    throw new System.ArgumentOutOfRangeException("Input", value, "Expected value to be greater than or equal to 0");
                }
                this._input = value;
            }
        }
        
        /// <summary>
        /// Interpolation algorithm.
        /// </summary>
        [Newtonsoft.Json.JsonConverterAttribute(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [Newtonsoft.Json.JsonPropertyAttribute("interpolation")]
        public InterpolationEnum Interpolation {
            get {
                return this._interpolation;
            }
            set {
                this._interpolation = value;
            }
        }
        
        /// <summary>
        /// The index of an accessor, containing keyframe output values.
        /// </summary>
        [Newtonsoft.Json.JsonRequiredAttribute()]
        [Newtonsoft.Json.JsonPropertyAttribute("output")]
        public int Output {
            get {
                return this._output;
            }
            set {
                if ((value < 0)) {
                    throw new System.ArgumentOutOfRangeException("Output", value, "Expected value to be greater than or equal to 0");
                }
                this._output = value;
            }
        }
        
        /// <summary>
        /// Dictionary object with extension-specific objects.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("extensions")]
        public System.Collections.Generic.Dictionary<string, object> Extensions {
            get {
                return this._extensions;
            }
            set {
                this._extensions = value;
            }
        }
        
        /// <summary>
        /// Application-specific data.
        /// </summary>
        [Newtonsoft.Json.JsonPropertyAttribute("extras")]
        public GltfExtras Extras {
            get {
                return this._extras;
            }
            set {
                this._extras = value;
            }
        }
        
        public bool ShouldSerializeInterpolation() {
            return ((_interpolation == InterpolationEnum.LINEAR) 
                        == false);
        }
        
        public bool ShouldSerializeExtensions() {
            return ((_extensions == null) 
                        == false);
        }
        
        public bool ShouldSerializeExtras() {
            return ((_extras == null) 
                        == false);
        }
        
        public enum InterpolationEnum {
            
            LINEAR,
            
            STEP,
            
            CUBICSPLINE,
        }
    }
}
